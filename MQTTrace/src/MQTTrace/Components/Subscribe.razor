@inject IMqttService MqttService
@implements IDisposable

<div class="field">
    <div class="control">
        <input class="input" type="text" placeholder="Topic" @bind="NewTopic" />
    </div>
</div>
<div class="field">
    <div class="control">
        <button class="button is-primary @(Subscribing ? "is-loading" : "")" disabled="@(!Connected)" @onclick="SubscribeNewTopicAsync">Subscribe</button>
    </div>
</div>

@code
{
    public bool Connected { get; set; }

    public string NewTopic { get; set; }

    public bool Subscribing { get; set; }

    public async Task SubscribeNewTopicAsync()
    {
        Subscribing = true;
        try
        {
            await MqttService.SubscribeAsync(NewTopic);
        }
        finally
        {
            Subscribing = false;
        }
    }

    protected override void OnInitialized()
    {
        MqttService.ConnectionStateChanged += HandleConnectionStateChanged;
    }

    private async Task HandleConnectionStateChanged()
    {
        await InvokeAsync(() =>
        {
            Connected = MqttService.Connected;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        MqttService.ConnectionStateChanged -= HandleConnectionStateChanged;
    }
}
