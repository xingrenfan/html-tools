@using System.Text
@inject IMqttService MqttService
@implements IDisposable

<table class="table is-narrow is-hoverable is-fullwidth">
    <thead>
        <tr>
            <th>#</th>
            <th>Topic</th>
            <th>Timestamp</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var message in MessagesOnCurrentPage)
        {
            <tr @onclick="@(e => UpdateSelectedMessage(e, message.MessageId))">
                <th scope="row">@(message.MessageId)</th>
                <td>@(message.Message.Topic)</td>
                <td>@(message.Timestamp)</td>
            </tr>
        }
    </tbody>
</table>

@if (SelectedMessage != null)
{
    <div class="modal @(MessageCardActive ? "is-active" : "")">
        <div class="modal-background" @onclick="CloseMessageCard"></div>
        <div class="modal-card">
            <header class="modal-card-head">
                <p class="modal-card-title">Message #@(SelectedMessage.MessageId)</p>
                <button class="delete" aria-label="close" @onclick="CloseMessageCard"></button>
            </header>
            <section class="modal-card-body">
                Content: @(SelectedMessage != null ? Encoding.UTF8.GetString(SelectedMessage.Message.Payload) : "")
            </section>
            <footer class="modal-card-foot">
                <!-- TODO: add prev/next buttons-->
            </footer>
        </div>
    </div>
}

@code
{
    public List<ReceivedMessage> MessagesOnCurrentPage { get; set; }

    public ReceivedMessage SelectedMessage { get; set; } = null;

    public bool MessageCardActive { get; set; } = false;

    protected override void OnInitialized()
    {
        LoadMessageOnCurrentPage();

        MqttService.MessageReceived += MessageReceivedHandler;
    }

    private async Task MessageReceivedHandler(ReceivedMessage receivedMessage)
    {
        await InvokeAsync(() =>
        {
            LoadMessageOnCurrentPage();

            StateHasChanged();

        });
    }

    private void LoadMessageOnCurrentPage()
    {
        MessagesOnCurrentPage = MqttService.ReceivedMessages
            .TakeLast(20)
            .Reverse()
            .ToList();
    }

    private void UpdateSelectedMessage(MouseEventArgs e, int messageId)
    {
        SelectedMessage = MessagesOnCurrentPage.Find(m => m.MessageId == messageId);
        
        MessageCardActive = true;
    }

    private void CloseMessageCard(MouseEventArgs e)
    {
        MessageCardActive = false;
    }

    public void Dispose()
    {
        MqttService.MessageReceived -= MessageReceivedHandler;
    }
}
